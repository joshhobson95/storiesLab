One of my biggest learning experiences with coding so far was taught to me through a backslash. I was working on a project in my DevMountain course that taught us how to deploy our projects through heroku.I was working on the assignment with a friend and we finished a bit early so we started trying to add stuff to our mostly bare websites to test our coding skills. He had mentioned that he has learned an easy light and dark mode that utilized a classList.toggle method that simply adds and removes a class in turn removing styling and switching from a light to dark mode. It seemed simple enough so we tried to implement it in our sites. An hour went by. And then almost two, and we still couldn't get the code to work. At this point we had copied everything exactly from the code he had used previously and it still did not work. A bit frustrated, we gave up and finished out our day of class. But after class I could not get over how something so simple could be failing. So I tried for another hour and then another hour. I ended up frustrated and gave it up all together. I slept on it and the next morning before class I skimmed over my code looking at examples and stack overflow pages just so desperately wanting the simple classList.toggle() method to work. Then I noticed something so minute that when it turned out to be the problem I was baffled. The “/”. 
I hadn't noticed before but in previous projects we had just been sourcing our javascript files in our HTML without a backslash. Just src=”filename.js’. But when we were given the demo the javascript file was sourced with a backslash in front like so src=”/filename.js”. I then remembered what our instruction had warned us about with the difference between a deployed site and using live server and how there were some slight differences, this being one of them. Filepathing can apparently get a little touchy when using live server compared to a deployed application. This backslash would prevent the javascript file from being sourced correctly on live server, but in the deployed application it would work just fine. In the end the problem wasnt my code, or the way that i wrote the function or even the syntax of the function itself. It was the src tag within the HTML and my assumption that using live server was the same as a fully deployed application. I laughed to myself and learned something huge that day. You can be doing everything 99% correct and the code can still break. You could have just one character somewhere where it is not supposed to be and it will break the entire application you are working on. Attention to detail is extremely important in coding but also not second guessing yourself too much. You may have written everything correctly, so make sure and check your typos and scan your code very carefully. That bug you are pulling your hair out over could be as simple as removing a backslash.




While making my capstone project I learned the importance of hitting a minimum viable product and how it can help get a project finished to a polished point. I know that I wanted to make a persistent database for my application but I knew that SQL was not one of my strong suits and it could take a long time to perfect. So I decided to divide my time and create a site that worked without a SQL database and then add it in later. I am glad I chose this path, although I did finish my project a bit early, it was done to completion and I was able to move onto other assignments that ended up eating a lot more of my time than I had thought they would. The feeling of stressing and scrambling at the last minute is something I am happy to avoid. Time management is a must in coding and I am glad that I had the forethought to temper my ambition in order to see something through to completion. It will be quite fulfilling to add the SQL database in the future and there will always be more time to perfect something that I have a passion for. 
